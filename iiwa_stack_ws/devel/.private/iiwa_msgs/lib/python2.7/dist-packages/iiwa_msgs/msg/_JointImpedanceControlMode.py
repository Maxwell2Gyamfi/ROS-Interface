# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from iiwa_msgs/JointImpedanceControlMode.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import iiwa_msgs.msg

class JointImpedanceControlMode(genpy.Message):
  _md5sum = "c2267019473eba8c0a4619b649192c0d"
  _type = "iiwa_msgs/JointImpedanceControlMode"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Stiffness values in [Nm/rad]. Stiffness values must be >= 0. 
JointQuantity joint_stiffness

# Damping values. Damping values must be between 0 and 1. 
JointQuantity joint_damping

================================================================================
MSG: iiwa_msgs/JointQuantity
float32 a1
float32 a2
float32 a3
float32 a4
float32 a5
float32 a6
float32 a7"""
  __slots__ = ['joint_stiffness','joint_damping']
  _slot_types = ['iiwa_msgs/JointQuantity','iiwa_msgs/JointQuantity']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint_stiffness,joint_damping

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JointImpedanceControlMode, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint_stiffness is None:
        self.joint_stiffness = iiwa_msgs.msg.JointQuantity()
      if self.joint_damping is None:
        self.joint_damping = iiwa_msgs.msg.JointQuantity()
    else:
      self.joint_stiffness = iiwa_msgs.msg.JointQuantity()
      self.joint_damping = iiwa_msgs.msg.JointQuantity()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14f().pack(_x.joint_stiffness.a1, _x.joint_stiffness.a2, _x.joint_stiffness.a3, _x.joint_stiffness.a4, _x.joint_stiffness.a5, _x.joint_stiffness.a6, _x.joint_stiffness.a7, _x.joint_damping.a1, _x.joint_damping.a2, _x.joint_damping.a3, _x.joint_damping.a4, _x.joint_damping.a5, _x.joint_damping.a6, _x.joint_damping.a7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint_stiffness is None:
        self.joint_stiffness = iiwa_msgs.msg.JointQuantity()
      if self.joint_damping is None:
        self.joint_damping = iiwa_msgs.msg.JointQuantity()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.joint_stiffness.a1, _x.joint_stiffness.a2, _x.joint_stiffness.a3, _x.joint_stiffness.a4, _x.joint_stiffness.a5, _x.joint_stiffness.a6, _x.joint_stiffness.a7, _x.joint_damping.a1, _x.joint_damping.a2, _x.joint_damping.a3, _x.joint_damping.a4, _x.joint_damping.a5, _x.joint_damping.a6, _x.joint_damping.a7,) = _get_struct_14f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14f().pack(_x.joint_stiffness.a1, _x.joint_stiffness.a2, _x.joint_stiffness.a3, _x.joint_stiffness.a4, _x.joint_stiffness.a5, _x.joint_stiffness.a6, _x.joint_stiffness.a7, _x.joint_damping.a1, _x.joint_damping.a2, _x.joint_damping.a3, _x.joint_damping.a4, _x.joint_damping.a5, _x.joint_damping.a6, _x.joint_damping.a7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint_stiffness is None:
        self.joint_stiffness = iiwa_msgs.msg.JointQuantity()
      if self.joint_damping is None:
        self.joint_damping = iiwa_msgs.msg.JointQuantity()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.joint_stiffness.a1, _x.joint_stiffness.a2, _x.joint_stiffness.a3, _x.joint_stiffness.a4, _x.joint_stiffness.a5, _x.joint_stiffness.a6, _x.joint_stiffness.a7, _x.joint_damping.a1, _x.joint_damping.a2, _x.joint_damping.a3, _x.joint_damping.a4, _x.joint_damping.a5, _x.joint_damping.a6, _x.joint_damping.a7,) = _get_struct_14f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14f = None
def _get_struct_14f():
    global _struct_14f
    if _struct_14f is None:
        _struct_14f = struct.Struct("<14f")
    return _struct_14f
